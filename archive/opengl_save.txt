// #	include <stdio.h>
// #	include <stdarg.h>
// #	include <math.h>
// #	define GL_GLEXT_PROTOTYPES
// #	ifdef __APPLE__
// #		include <GLUT/glut.h>
// #	else
// #		include <GL/glut.h>
// #	endif

// // angle of rotation for the camera direction
// float angle = 0.0f;

// // actual vector representing the camera's direction
// float lx=0.0f,lz=-1.0f;

// // XZ position of the camera
// float x=0.0f, z=5.0f;

// // the key states. These variables will be zero
// //when no key is being presses
// float deltaAngle = 0.0f;
// float deltaMove = 0;
// float deltaMoveHorizontal = 0.1f;
// int xOrigin = -1;

// void init2D(float r, float g, float b)
// {
// 	glClearColor(r,g,b,0.0);  
// 	glMatrixMode (GL_PROJECTION);
// 	gluOrtho2D (0.0, 200.0, 0.0, 150.0);
// }

// void computePosHor(float deltaMoveHorizontal)
// {
// 	x += deltaMoveHorizontal;
// }

// void main_loop(void)
// {
// 	if(deltaMoveHorizontal){
// 		computePosHor(deltaMoveHorizontal);
// 	}
// 	// glClear(GL_COLOR_BUFFER_BIT);
// 	glColor3f(0.11, 0.56, 1.0);
// 	// glColor3f(1.0, 1.0, 1.0);

// 	// Set the camera
// 	printf("setting camera: %f \n", x);
// 	gluLookAt(	
// 		x , 0.0f,  0.0f, 
// 		x, 0.0f, -1.0f,
// 		0.0f, 1.0f,  0.0f
// 	);

// 	// glVertex2i(100 + x ,50);

// 	//draw a line
// 	// printf("%f\n", cos(x) * 140);
// 	glBegin(GL_POINTS);
// 		glVertex2i(120, 40);
// 		glVertex2i(121, 40);
// 		glVertex2i(120, 41);
// 		glVertex2i(121, 41);
// 	glEnd();

// 	glFlush();
// }

// int main(int argc,char *argv[])
// {
// 	glutInit(&argc,argv);
// 	glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
// 	glutInitWindowSize (1200, 300);
// 	glutInitWindowPosition (200, 100);
// 	glutCreateWindow ("cDia");
// 	init2D(0.0,0.0,0.0);

// 	glutDisplayFunc(main_loop);
// 	// glutReshapeFunc(changeSize);
// 	glutIdleFunc(main_loop);

// 	glutMainLoop();
// 	return 1;
// }






// // // //mouse
// // // #include <stdlib.h>
// // // #include <math.h>

// // // #ifdef __APPLE__
// // // #include <GLUT/glut.h>
// // // #else
// // // #include <GL/glut.h>
// // // #endif
// // // int i,j;
// // // // angle of rotation for the camera direction
// // // float angle = 0.0f;

// // // // actual vector representing the camera's direction
// // // float lx=0.0f,lz=-1.0f;

// // // // XZ position of the camera
// // // float x=0.0f, z=5.0f;

// // // // the key states. These variables will be zero
// // // //when no key is being presses
// // // float deltaAngle = 0.0f;
// // // float deltaMove = 0;
// // // float deltaMoveHorizontal = 0;
// // // int xOrigin = -1;

// // // void changeSize(int w, int h) {

// // //   // Prevent a divide by zero, when window is too short
// // // 	// (you cant make a window of zero width).
// // // 	if (h == 0)
// // // 		h = 1;

// // // 	float ratio =  w * 1.0 / h;

// // // 	// Use the Projection Matrix
// // // 	glMatrixMode(GL_PROJECTION);

// // // 	// Reset Matrix
// // // 	glLoadIdentity();

// // // 	// Set the viewport to be the entire window
// // // 	glViewport(0, 0, w, h);

// // // 	// Set the correct perspective.
// // // 	gluPerspective(45.0f, ratio, 0.1f, 100.0f);

// // // 	// Get Back to the Modelview
// // // 	glMatrixMode(GL_MODELVIEW);
// // // }

// // // void computePos(float deltaMove) {

// // // 	x += deltaMove;
// // // 	z += deltaMove;
// // // }
// // // void computePosHor(float deltaMoveHorizontal) {
// // // 	x += deltaMoveHorizontal;
// // // }

// // // void renderScene(void) {

// // // 	if(deltaMoveHorizontal){
// // // 		computePosHor(deltaMoveHorizontal);
// // // 	}
// // // 	// Clear Color and Depth Buffers
// // // 	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

// // // 	// Reset transformations
// // // 	// glLoadIdentity();

// // // 	// Set the camera
// // // 	// gluLookAt(	x, 1.0f, z,
// // // 	// 		x+lx, 1.0f,  z+lz,
// // // 	// 		0.0f, 1.0f,  0.0f);

// // // 	// draw point
// // // 	glColor3f(0.11, 0.56, 1.0);

// // // // 	glBegin(GL_LINES);
// // // // 		glVertex2i(0,50);
// // // // 		glVertex2i(50,50);
// // // // 	glEnd();

// // // 	// // Draw ground

// // // 	// glColor3f(0.9f, 0.9f, 0.9f);
// // // 	// glBegin(GL_QUADS);
// // // 	// 	glVertex3f(-100.0f, 0.0f, -100.0f);
// // // 	// 	glVertex3f(-100.0f, 0.0f,  100.0f);
// // // 	// 	glVertex3f( 100.0f, 0.0f,  100.0f);
// // // 	// 	glVertex3f( 100.0f, 0.0f, -100.0f);
// // // 	// glEnd();

// // // 	// // Draw 36 SnowMen
// // // 	// for(i = -3; i < 3; i++)
// // // 	// 	for(j=-3; j < 3; j++) {
// // //  //                     glPushMatrix();
// // //  //                     glTranslatef(i*10.0,0,j * 10.0);
// // //  //                     drawSnowMan();
// // //  //                     glPopMatrix();
// // //  //               }
// // //       	glutSwapBuffers();
// // // } 

// // // int main(int argc, char **argv) {

// // // 	// init GLUT and create window
// // // 	glutInit(&argc, argv);
// // // 	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
// // // 	glutInitWindowPosition(100,100);
// // // 	glutInitWindowSize(1200,300);
// // // 	glutCreateWindow("Lighthouse3D - GLUT Tutorial");

// // // 	// register callbacks
// // // 	glutDisplayFunc(renderScene);
// // // 	glutReshapeFunc(changeSize);
// // // 	glutIdleFunc(renderScene);

// // // 	// OpenGL init
// // // 	glEnable(GL_DEPTH_TEST);

// // // 	// enter GLUT event processing cycle
// // // 	glutMainLoop();

// // // 	return 1;
// // // }